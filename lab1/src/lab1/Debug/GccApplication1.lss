
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  0000023c  000002d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800204  00800204  000002d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000be9  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a95  00000000  00000000  00000f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f5  00000000  00000000  00001a02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001df8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000532  00000000  00000000  00001e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006e  00000000  00000000  0000238e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000023fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
   2:	00 00       	nop
   4:	80 c0       	rjmp	.+256    	; 0x106 <__bad_interrupt>
   6:	00 00       	nop
   8:	7e c0       	rjmp	.+252    	; 0x106 <__bad_interrupt>
   a:	00 00       	nop
   c:	7c c0       	rjmp	.+248    	; 0x106 <__bad_interrupt>
   e:	00 00       	nop
  10:	7a c0       	rjmp	.+244    	; 0x106 <__bad_interrupt>
  12:	00 00       	nop
  14:	78 c0       	rjmp	.+240    	; 0x106 <__bad_interrupt>
  16:	00 00       	nop
  18:	76 c0       	rjmp	.+236    	; 0x106 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	74 c0       	rjmp	.+232    	; 0x106 <__bad_interrupt>
  1e:	00 00       	nop
  20:	72 c0       	rjmp	.+228    	; 0x106 <__bad_interrupt>
  22:	00 00       	nop
  24:	70 c0       	rjmp	.+224    	; 0x106 <__bad_interrupt>
  26:	00 00       	nop
  28:	6e c0       	rjmp	.+220    	; 0x106 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6c c0       	rjmp	.+216    	; 0x106 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6a c0       	rjmp	.+212    	; 0x106 <__bad_interrupt>
  32:	00 00       	nop
  34:	68 c0       	rjmp	.+208    	; 0x106 <__bad_interrupt>
  36:	00 00       	nop
  38:	66 c0       	rjmp	.+204    	; 0x106 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	64 c0       	rjmp	.+200    	; 0x106 <__bad_interrupt>
  3e:	00 00       	nop
  40:	62 c0       	rjmp	.+196    	; 0x106 <__bad_interrupt>
  42:	00 00       	nop
  44:	60 c0       	rjmp	.+192    	; 0x106 <__bad_interrupt>
  46:	00 00       	nop
  48:	5e c0       	rjmp	.+188    	; 0x106 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5c c0       	rjmp	.+184    	; 0x106 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5a c0       	rjmp	.+180    	; 0x106 <__bad_interrupt>
  52:	00 00       	nop
  54:	58 c0       	rjmp	.+176    	; 0x106 <__bad_interrupt>
  56:	00 00       	nop
  58:	56 c0       	rjmp	.+172    	; 0x106 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	54 c0       	rjmp	.+168    	; 0x106 <__bad_interrupt>
  5e:	00 00       	nop
  60:	52 c0       	rjmp	.+164    	; 0x106 <__bad_interrupt>
  62:	00 00       	nop
  64:	50 c0       	rjmp	.+160    	; 0x106 <__bad_interrupt>
  66:	00 00       	nop
  68:	4e c0       	rjmp	.+156    	; 0x106 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4c c0       	rjmp	.+152    	; 0x106 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4a c0       	rjmp	.+148    	; 0x106 <__bad_interrupt>
  72:	00 00       	nop
  74:	48 c0       	rjmp	.+144    	; 0x106 <__bad_interrupt>
  76:	00 00       	nop
  78:	46 c0       	rjmp	.+140    	; 0x106 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	44 c0       	rjmp	.+136    	; 0x106 <__bad_interrupt>
  7e:	00 00       	nop
  80:	42 c0       	rjmp	.+132    	; 0x106 <__bad_interrupt>
  82:	00 00       	nop
  84:	40 c0       	rjmp	.+128    	; 0x106 <__bad_interrupt>
  86:	00 00       	nop
  88:	3e c0       	rjmp	.+124    	; 0x106 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3c c0       	rjmp	.+120    	; 0x106 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3a c0       	rjmp	.+116    	; 0x106 <__bad_interrupt>
  92:	00 00       	nop
  94:	38 c0       	rjmp	.+112    	; 0x106 <__bad_interrupt>
  96:	00 00       	nop
  98:	36 c0       	rjmp	.+108    	; 0x106 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	34 c0       	rjmp	.+104    	; 0x106 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	32 c0       	rjmp	.+100    	; 0x106 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	30 c0       	rjmp	.+96     	; 0x106 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2e c0       	rjmp	.+92     	; 0x106 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2c c0       	rjmp	.+88     	; 0x106 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2a c0       	rjmp	.+84     	; 0x106 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	28 c0       	rjmp	.+80     	; 0x106 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	26 c0       	rjmp	.+76     	; 0x106 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	24 c0       	rjmp	.+72     	; 0x106 <__bad_interrupt>
  be:	00 00       	nop
  c0:	22 c0       	rjmp	.+68     	; 0x106 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	20 c0       	rjmp	.+64     	; 0x106 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1e c0       	rjmp	.+60     	; 0x106 <__bad_interrupt>
	...

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	12 e0       	ldi	r17, 0x02	; 2
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b2 e0       	ldi	r27, 0x02	; 2
  de:	ec e3       	ldi	r30, 0x3C	; 60
  e0:	f2 e0       	ldi	r31, 0x02	; 2
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	0b bf       	out	0x3b, r16	; 59
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
  e8:	07 90       	elpm	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	a4 30       	cpi	r26, 0x04	; 4
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>

000000f2 <__do_clear_bss>:
  f2:	22 e0       	ldi	r18, 0x02	; 2
  f4:	a4 e0       	ldi	r26, 0x04	; 4
  f6:	b2 e0       	ldi	r27, 0x02	; 2
  f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
  fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
  fc:	a5 30       	cpi	r26, 0x05	; 5
  fe:	b2 07       	cpc	r27, r18
 100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
 102:	5a d0       	rcall	.+180    	; 0x1b8 <main>
 104:	99 c0       	rjmp	.+306    	; 0x238 <_exit>

00000106 <__bad_interrupt>:
 106:	7c cf       	rjmp	.-264    	; 0x0 <__vectors>

00000108 <dynamicDelay>:
bool shouldRun = true;
uint8_t mode = 0;
uint16_t delayMs = 200;

void dynamicDelay(uint16_t delayMs) {
	while (delayMs > 0) {
 108:	00 97       	sbiw	r24, 0x00	; 0
 10a:	49 f0       	breq	.+18     	; 0x11e <dynamicDelay+0x16>
		delayMs--;
 10c:	01 97       	sbiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	e9 ef       	ldi	r30, 0xF9	; 249
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <dynamicDelay+0xa>
 116:	00 c0       	rjmp	.+0      	; 0x118 <dynamicDelay+0x10>
 118:	00 00       	nop
bool shouldRun = true;
uint8_t mode = 0;
uint16_t delayMs = 200;

void dynamicDelay(uint16_t delayMs) {
	while (delayMs > 0) {
 11a:	00 97       	sbiw	r24, 0x00	; 0
 11c:	b9 f7       	brne	.-18     	; 0x10c <dynamicDelay+0x4>
 11e:	08 95       	ret

00000120 <makeTick>:
		_delay_ms(1);
	}
}

void makeTick() {
	if (!shouldRun) {
 120:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <shouldRun>
 124:	81 11       	cpse	r24, r1
 126:	02 c0       	rjmp	.+4      	; 0x12c <makeTick+0xc>
		PORTB = 0;
 128:	15 b8       	out	0x05, r1	; 5
		return;
 12a:	08 95       	ret
	}
	
	switch(mode) {
 12c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	41 f0       	breq	.+16     	; 0x144 <makeTick+0x24>
 134:	18 f0       	brcs	.+6      	; 0x13c <makeTick+0x1c>
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	41 f0       	breq	.+16     	; 0x14a <makeTick+0x2a>
 13a:	08 95       	ret
		case 0: {
			PORTB = ~PORTB;
 13c:	85 b1       	in	r24, 0x05	; 5
 13e:	80 95       	com	r24
 140:	85 b9       	out	0x05, r24	; 5
			break;
 142:	08 95       	ret
		}
		
		case 1: {
			PORTB = 0xff;
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	85 b9       	out	0x05, r24	; 5
			break;
 148:	08 95       	ret
		}
		
		case 2: {
			PORTB = (PORTB << 1);
 14a:	85 b1       	in	r24, 0x05	; 5
 14c:	88 0f       	add	r24, r24
 14e:	85 b9       	out	0x05, r24	; 5
			if (!(PORTB & (1 << 1))) {
 150:	29 99       	sbic	0x05, 1	; 5
 152:	03 c0       	rjmp	.+6      	; 0x15a <makeTick+0x3a>
				PORTB++; // If penultimate light is off then turn on last light
 154:	85 b1       	in	r24, 0x05	; 5
 156:	8f 5f       	subi	r24, 0xFF	; 255
 158:	85 b9       	out	0x05, r24	; 5
 15a:	08 95       	ret

0000015c <increaseDelay>:
		}
	}
}

void increaseDelay() {
	delayMs += 400;
 15c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 160:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 164:	80 57       	subi	r24, 0x70	; 112
 166:	9e 4f       	sbci	r25, 0xFE	; 254
	if (delayMs > 1000) {
 168:	89 3e       	cpi	r24, 0xE9	; 233
 16a:	23 e0       	ldi	r18, 0x03	; 3
 16c:	92 07       	cpc	r25, r18
 16e:	28 f4       	brcc	.+10     	; 0x17a <increaseDelay+0x1e>
		}
	}
}

void increaseDelay() {
	delayMs += 400;
 170:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
 174:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 178:	08 95       	ret
	if (delayMs > 1000) {
		delayMs = 200;
 17a:	88 ec       	ldi	r24, 0xC8	; 200
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
 182:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 186:	08 95       	ret

00000188 <changeMode>:
	}
}

void changeMode() {
	mode = (mode + 1) % 3;
 188:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	63 e0       	ldi	r22, 0x03	; 3
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	2a d0       	rcall	.+84     	; 0x1ea <__divmodhi4>
 196:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__data_end>
	
	switch(mode) {
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	39 f0       	breq	.+14     	; 0x1ac <changeMode+0x24>
 19e:	18 f0       	brcs	.+6      	; 0x1a6 <changeMode+0x1e>
 1a0:	82 30       	cpi	r24, 0x02	; 2
 1a2:	39 f0       	breq	.+14     	; 0x1b2 <changeMode+0x2a>
 1a4:	08 95       	ret
		case 0: {
			PORTB = 0xff; // Blink
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	85 b9       	out	0x05, r24	; 5
			break;
 1aa:	08 95       	ret
		}
		
		case 1: {
			PORTB = 0xff; // Constant light
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	85 b9       	out	0x05, r24	; 5
			break;
 1b0:	08 95       	ret
		}
		
		case 2: { // Moving light
			PORTB = 0b10101010;
 1b2:	8a ea       	ldi	r24, 0xAA	; 170
 1b4:	85 b9       	out	0x05, r24	; 5
 1b6:	08 95       	ret

000001b8 <main>:
		}
	}
}

int main(void) {
	DDRA = 0;
 1b8:	11 b8       	out	0x01, r1	; 1
    DDRB = 0xff;
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	84 b9       	out	0x04, r24	; 4

    while (1) {
		
		if (PINA & (1 << 0)) { // Turn on/off
			shouldRun = !shouldRun;	
 1be:	c1 e0       	ldi	r28, 0x01	; 1
	DDRA = 0;
    DDRB = 0xff;

    while (1) {
		
		if (PINA & (1 << 0)) { // Turn on/off
 1c0:	00 9b       	sbis	0x00, 0	; 0
 1c2:	06 c0       	rjmp	.+12     	; 0x1d0 <main+0x18>
			shouldRun = !shouldRun;	
 1c4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <shouldRun>
 1c8:	8c 27       	eor	r24, r28
 1ca:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <shouldRun>
 1ce:	06 c0       	rjmp	.+12     	; 0x1dc <main+0x24>
		} else if (PINA & (1 << 1)) { // Switch mode
 1d0:	01 9b       	sbis	0x00, 1	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <main+0x20>
			changeMode();
 1d4:	d9 df       	rcall	.-78     	; 0x188 <changeMode>
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <main+0x24>
		} else if (PINA & (1 << 2)) { // Change speed
			increaseDelay();
 1d8:	02 99       	sbic	0x00, 2	; 0
		}
		
		makeTick();
 1da:	c0 df       	rcall	.-128    	; 0x15c <increaseDelay>
 1dc:	a1 df       	rcall	.-190    	; 0x120 <makeTick>
		dynamicDelay(delayMs);
 1de:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 1e2:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 1e6:	90 df       	rcall	.-224    	; 0x108 <dynamicDelay>
    }
 1e8:	eb cf       	rjmp	.-42     	; 0x1c0 <main+0x8>

000001ea <__divmodhi4>:
 1ea:	97 fb       	bst	r25, 7
 1ec:	07 2e       	mov	r0, r23
 1ee:	16 f4       	brtc	.+4      	; 0x1f4 <__divmodhi4+0xa>
 1f0:	00 94       	com	r0
 1f2:	06 d0       	rcall	.+12     	; 0x200 <__divmodhi4_neg1>
 1f4:	77 fd       	sbrc	r23, 7
 1f6:	08 d0       	rcall	.+16     	; 0x208 <__divmodhi4_neg2>
 1f8:	0b d0       	rcall	.+22     	; 0x210 <__udivmodhi4>
 1fa:	07 fc       	sbrc	r0, 7
 1fc:	05 d0       	rcall	.+10     	; 0x208 <__divmodhi4_neg2>
 1fe:	3e f4       	brtc	.+14     	; 0x20e <__divmodhi4_exit>

00000200 <__divmodhi4_neg1>:
 200:	90 95       	com	r25
 202:	81 95       	neg	r24
 204:	9f 4f       	sbci	r25, 0xFF	; 255
 206:	08 95       	ret

00000208 <__divmodhi4_neg2>:
 208:	70 95       	com	r23
 20a:	61 95       	neg	r22
 20c:	7f 4f       	sbci	r23, 0xFF	; 255

0000020e <__divmodhi4_exit>:
 20e:	08 95       	ret

00000210 <__udivmodhi4>:
 210:	aa 1b       	sub	r26, r26
 212:	bb 1b       	sub	r27, r27
 214:	51 e1       	ldi	r21, 0x11	; 17
 216:	07 c0       	rjmp	.+14     	; 0x226 <__udivmodhi4_ep>

00000218 <__udivmodhi4_loop>:
 218:	aa 1f       	adc	r26, r26
 21a:	bb 1f       	adc	r27, r27
 21c:	a6 17       	cp	r26, r22
 21e:	b7 07       	cpc	r27, r23
 220:	10 f0       	brcs	.+4      	; 0x226 <__udivmodhi4_ep>
 222:	a6 1b       	sub	r26, r22
 224:	b7 0b       	sbc	r27, r23

00000226 <__udivmodhi4_ep>:
 226:	88 1f       	adc	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	5a 95       	dec	r21
 22c:	a9 f7       	brne	.-22     	; 0x218 <__udivmodhi4_loop>
 22e:	80 95       	com	r24
 230:	90 95       	com	r25
 232:	bc 01       	movw	r22, r24
 234:	cd 01       	movw	r24, r26
 236:	08 95       	ret

00000238 <_exit>:
 238:	f8 94       	cli

0000023a <__stop_program>:
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__stop_program>
