
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000332  000003c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000332  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800202  00800202  000003c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bb6  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a61  00000000  00000000  0000103e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000428  00000000  00000000  00001a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00001ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004df  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000021b  00000000  00000000  000024df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000026fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__vector_1>
   6:	00 00       	nop
   8:	e9 c0       	rjmp	.+466    	; 0x1dc <__vector_2>
   a:	00 00       	nop
   c:	93 c0       	rjmp	.+294    	; 0x134 <__vector_3>
   e:	00 00       	nop
  10:	7a c0       	rjmp	.+244    	; 0x106 <__bad_interrupt>
  12:	00 00       	nop
  14:	78 c0       	rjmp	.+240    	; 0x106 <__bad_interrupt>
  16:	00 00       	nop
  18:	76 c0       	rjmp	.+236    	; 0x106 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	74 c0       	rjmp	.+232    	; 0x106 <__bad_interrupt>
  1e:	00 00       	nop
  20:	72 c0       	rjmp	.+228    	; 0x106 <__bad_interrupt>
  22:	00 00       	nop
  24:	70 c0       	rjmp	.+224    	; 0x106 <__bad_interrupt>
  26:	00 00       	nop
  28:	6e c0       	rjmp	.+220    	; 0x106 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6c c0       	rjmp	.+216    	; 0x106 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6a c0       	rjmp	.+212    	; 0x106 <__bad_interrupt>
  32:	00 00       	nop
  34:	68 c0       	rjmp	.+208    	; 0x106 <__bad_interrupt>
  36:	00 00       	nop
  38:	66 c0       	rjmp	.+204    	; 0x106 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	64 c0       	rjmp	.+200    	; 0x106 <__bad_interrupt>
  3e:	00 00       	nop
  40:	62 c0       	rjmp	.+196    	; 0x106 <__bad_interrupt>
  42:	00 00       	nop
  44:	60 c0       	rjmp	.+192    	; 0x106 <__bad_interrupt>
  46:	00 00       	nop
  48:	5e c0       	rjmp	.+188    	; 0x106 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5c c0       	rjmp	.+184    	; 0x106 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5a c0       	rjmp	.+180    	; 0x106 <__bad_interrupt>
  52:	00 00       	nop
  54:	58 c0       	rjmp	.+176    	; 0x106 <__bad_interrupt>
  56:	00 00       	nop
  58:	56 c0       	rjmp	.+172    	; 0x106 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	54 c0       	rjmp	.+168    	; 0x106 <__bad_interrupt>
  5e:	00 00       	nop
  60:	52 c0       	rjmp	.+164    	; 0x106 <__bad_interrupt>
  62:	00 00       	nop
  64:	e4 c0       	rjmp	.+456    	; 0x22e <__vector_25>
  66:	00 00       	nop
  68:	4e c0       	rjmp	.+156    	; 0x106 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4c c0       	rjmp	.+152    	; 0x106 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4a c0       	rjmp	.+148    	; 0x106 <__bad_interrupt>
  72:	00 00       	nop
  74:	48 c0       	rjmp	.+144    	; 0x106 <__bad_interrupt>
  76:	00 00       	nop
  78:	46 c0       	rjmp	.+140    	; 0x106 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	44 c0       	rjmp	.+136    	; 0x106 <__bad_interrupt>
  7e:	00 00       	nop
  80:	42 c0       	rjmp	.+132    	; 0x106 <__bad_interrupt>
  82:	00 00       	nop
  84:	40 c0       	rjmp	.+128    	; 0x106 <__bad_interrupt>
  86:	00 00       	nop
  88:	3e c0       	rjmp	.+124    	; 0x106 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3c c0       	rjmp	.+120    	; 0x106 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3a c0       	rjmp	.+116    	; 0x106 <__bad_interrupt>
  92:	00 00       	nop
  94:	38 c0       	rjmp	.+112    	; 0x106 <__bad_interrupt>
  96:	00 00       	nop
  98:	36 c0       	rjmp	.+108    	; 0x106 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	34 c0       	rjmp	.+104    	; 0x106 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	32 c0       	rjmp	.+100    	; 0x106 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	30 c0       	rjmp	.+96     	; 0x106 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2e c0       	rjmp	.+92     	; 0x106 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2c c0       	rjmp	.+88     	; 0x106 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2a c0       	rjmp	.+84     	; 0x106 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	28 c0       	rjmp	.+80     	; 0x106 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	26 c0       	rjmp	.+76     	; 0x106 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	24 c0       	rjmp	.+72     	; 0x106 <__bad_interrupt>
  be:	00 00       	nop
  c0:	22 c0       	rjmp	.+68     	; 0x106 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	20 c0       	rjmp	.+64     	; 0x106 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1e c0       	rjmp	.+60     	; 0x106 <__bad_interrupt>
	...

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	12 e0       	ldi	r17, 0x02	; 2
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b2 e0       	ldi	r27, 0x02	; 2
  de:	e2 e3       	ldi	r30, 0x32	; 50
  e0:	f3 e0       	ldi	r31, 0x03	; 3
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	0b bf       	out	0x3b, r16	; 59
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
  e8:	07 90       	elpm	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	a2 30       	cpi	r26, 0x02	; 2
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>

000000f2 <__do_clear_bss>:
  f2:	22 e0       	ldi	r18, 0x02	; 2
  f4:	a2 e0       	ldi	r26, 0x02	; 2
  f6:	b2 e0       	ldi	r27, 0x02	; 2
  f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
  fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
  fc:	a7 30       	cpi	r26, 0x07	; 7
  fe:	b2 07       	cpc	r27, r18
 100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
 102:	d1 d0       	rcall	.+418    	; 0x2a6 <main>
 104:	14 c1       	rjmp	.+552    	; 0x32e <_exit>

00000106 <__bad_interrupt>:
 106:	7c cf       	rjmp	.-264    	; 0x0 <__vectors>

00000108 <__vector_1>:

bool shouldRun = true;
uint8_t mode = 0;
char comMsg;

ISR(INT0_vect) {
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
	cli();
 116:	f8 94       	cli
	shouldRun = !shouldRun;
 118:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__data_start>
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	89 27       	eor	r24, r25
 120:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
	sei();
 124:	78 94       	sei
}
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <__vector_3>:
	cli();
	changeMode();
	sei();
}

ISR(INT2_vect) {
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	8f 93       	push	r24
	cli();
 140:	f8 94       	cli
	OCR0A += 200;
 142:	87 b5       	in	r24, 0x27	; 39
 144:	88 53       	subi	r24, 0x38	; 56
 146:	87 bd       	out	0x27, r24	; 39
	if (OCR0A >= 600) {
 148:	87 b5       	in	r24, 0x27	; 39
		OCR0A = 200;
	}
	sei();
 14a:	78 94       	sei
}
 14c:	8f 91       	pop	r24
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <makeTick>:

void makeTick() {
	if (!shouldRun) {
 158:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 15c:	81 11       	cpse	r24, r1
 15e:	02 c0       	rjmp	.+4      	; 0x164 <makeTick+0xc>
		PORTB = 0;
 160:	15 b8       	out	0x05, r1	; 5
		return;
 162:	08 95       	ret
	}
	
	switch(mode) {
 164:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	41 f0       	breq	.+16     	; 0x17c <makeTick+0x24>
 16c:	18 f0       	brcs	.+6      	; 0x174 <makeTick+0x1c>
 16e:	82 30       	cpi	r24, 0x02	; 2
 170:	41 f0       	breq	.+16     	; 0x182 <makeTick+0x2a>
 172:	08 95       	ret
		case 0: {
			PORTB = ~PORTB;
 174:	85 b1       	in	r24, 0x05	; 5
 176:	80 95       	com	r24
 178:	85 b9       	out	0x05, r24	; 5
			break;
 17a:	08 95       	ret
		}
		
		case 1: {
			PORTB = 0xff;
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	85 b9       	out	0x05, r24	; 5
			break;
 180:	08 95       	ret
		}
		
		case 2: {
			PORTB = (PORTB << 1);
 182:	85 b1       	in	r24, 0x05	; 5
 184:	88 0f       	add	r24, r24
 186:	85 b9       	out	0x05, r24	; 5
			if (!(PORTB & (1 << 1))) {
 188:	29 99       	sbic	0x05, 1	; 5
 18a:	03 c0       	rjmp	.+6      	; 0x192 <makeTick+0x3a>
				PORTB++; // If penultimate light is off then turn on last light
 18c:	85 b1       	in	r24, 0x05	; 5
 18e:	8f 5f       	subi	r24, 0xFF	; 255
 190:	85 b9       	out	0x05, r24	; 5
 192:	08 95       	ret

00000194 <changeMode>:
		}
	}
}

void changeMode() {
	mode = (mode + 1) % 3;
 194:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	63 e0       	ldi	r22, 0x03	; 3
 19e:	70 e0       	ldi	r23, 0x00	; 0
 1a0:	9f d0       	rcall	.+318    	; 0x2e0 <__divmodhi4>
 1a2:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
	
	switch(mode) {
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	59 f0       	breq	.+22     	; 0x1c0 <changeMode+0x2c>
 1aa:	18 f0       	brcs	.+6      	; 0x1b2 <changeMode+0x1e>
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	79 f0       	breq	.+30     	; 0x1ce <changeMode+0x3a>
 1b0:	08 95       	ret
		case 0: {
			TCCR0A = 0x02; // CTC
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	84 bd       	out	0x24, r24	; 36
			PORTB = 0xff; // Blink
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	85 b9       	out	0x05, r24	; 5
			PORTF = 0b00000001;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	81 bb       	out	0x11, r24	; 17
			break;
 1be:	08 95       	ret
		}
		
		case 1: {
			TCCR0A = 0x40; // Normal
 1c0:	80 e4       	ldi	r24, 0x40	; 64
 1c2:	84 bd       	out	0x24, r24	; 36
			PORTB = 0xff; // Constant light
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
 1c6:	85 b9       	out	0x05, r24	; 5
			PORTF = 0b00000010;
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	81 bb       	out	0x11, r24	; 17
			break;
 1cc:	08 95       	ret
		}
		
		case 2: { // Moving light
			TCCR0A = 0x03; // Fast PWM
 1ce:	83 e0       	ldi	r24, 0x03	; 3
 1d0:	84 bd       	out	0x24, r24	; 36
			PORTB = 0b10101010;
 1d2:	8a ea       	ldi	r24, 0xAA	; 170
 1d4:	85 b9       	out	0x05, r24	; 5
			PORTF = 0b00000100;
 1d6:	84 e0       	ldi	r24, 0x04	; 4
 1d8:	81 bb       	out	0x11, r24	; 17
 1da:	08 95       	ret

000001dc <__vector_2>:
	cli();
	shouldRun = !shouldRun;
	sei();
}

ISR(INT1_vect) {
 1dc:	1f 92       	push	r1
 1de:	0f 92       	push	r0
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	0f 92       	push	r0
 1e4:	11 24       	eor	r1, r1
 1e6:	0b b6       	in	r0, 0x3b	; 59
 1e8:	0f 92       	push	r0
 1ea:	2f 93       	push	r18
 1ec:	3f 93       	push	r19
 1ee:	4f 93       	push	r20
 1f0:	5f 93       	push	r21
 1f2:	6f 93       	push	r22
 1f4:	7f 93       	push	r23
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
 1fa:	af 93       	push	r26
 1fc:	bf 93       	push	r27
 1fe:	ef 93       	push	r30
 200:	ff 93       	push	r31
	cli();
 202:	f8 94       	cli
	changeMode();
 204:	c7 df       	rcall	.-114    	; 0x194 <changeMode>
	sei();
 206:	78 94       	sei
}
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	bf 91       	pop	r27
 20e:	af 91       	pop	r26
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	7f 91       	pop	r23
 216:	6f 91       	pop	r22
 218:	5f 91       	pop	r21
 21a:	4f 91       	pop	r20
 21c:	3f 91       	pop	r19
 21e:	2f 91       	pop	r18
 220:	0f 90       	pop	r0
 222:	0b be       	out	0x3b, r0	; 59
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <__vector_25>:
		}
	}
}

char udr;
ISR(USART0_RX_vect) {
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	0b b6       	in	r0, 0x3b	; 59
 23a:	0f 92       	push	r0
 23c:	2f 93       	push	r18
 23e:	3f 93       	push	r19
 240:	4f 93       	push	r20
 242:	5f 93       	push	r21
 244:	6f 93       	push	r22
 246:	7f 93       	push	r23
 248:	8f 93       	push	r24
 24a:	9f 93       	push	r25
 24c:	af 93       	push	r26
 24e:	bf 93       	push	r27
 250:	ef 93       	push	r30
 252:	ff 93       	push	r31
	udr = UDR0;
 254:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 258:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <udr>
	
	switch(udr) {
 25c:	82 37       	cpi	r24, 0x72	; 114
 25e:	31 f0       	breq	.+12     	; 0x26c <__vector_25+0x3e>
 260:	83 37       	cpi	r24, 0x73	; 115
 262:	51 f0       	breq	.+20     	; 0x278 <__vector_25+0x4a>
 264:	8d 36       	cpi	r24, 0x6D	; 109
 266:	61 f4       	brne	.+24     	; 0x280 <__vector_25+0x52>
		case 'm': {
			changeMode();
 268:	95 df       	rcall	.-214    	; 0x194 <changeMode>
			break;
 26a:	0a c0       	rjmp	.+20     	; 0x280 <__vector_25+0x52>
		}
		
		case 'r': {
			shouldRun = !shouldRun;
 26c:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__data_start>
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	89 27       	eor	r24, r25
 274:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
		}
		
		case 's': {
			OCR0A += 200;
 278:	87 b5       	in	r24, 0x27	; 39
 27a:	88 53       	subi	r24, 0x38	; 56
 27c:	87 bd       	out	0x27, r24	; 39
			if (OCR0A >= 600) {
 27e:	87 b5       	in	r24, 0x27	; 39
			}
		}
		
		default: {}
	}
}
 280:	ff 91       	pop	r31
 282:	ef 91       	pop	r30
 284:	bf 91       	pop	r27
 286:	af 91       	pop	r26
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	7f 91       	pop	r23
 28e:	6f 91       	pop	r22
 290:	5f 91       	pop	r21
 292:	4f 91       	pop	r20
 294:	3f 91       	pop	r19
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	0b be       	out	0x3b, r0	; 59
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <main>:


int tmp;
int main(void) {
	DDRA = 0;
 2a6:	11 b8       	out	0x01, r1	; 1
	DDRB = 0xff;
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	84 b9       	out	0x04, r24	; 4
	DDRF = 0xff;
 2ac:	80 bb       	out	0x10, r24	; 16
	EICRA = 0b00111111;
 2ae:	8f e3       	ldi	r24, 0x3F	; 63
 2b0:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 0b00000111;
 2b4:	87 e0       	ldi	r24, 0x07	; 7
 2b6:	8d bb       	out	0x1d, r24	; 29
	PORTF = 0b00000001;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	81 bb       	out	0x11, r24	; 17

	OCR0A = 200;
 2bc:	88 ec       	ldi	r24, 0xC8	; 200
 2be:	87 bd       	out	0x27, r24	; 39
	TCCR0A = 0x02; // CTC
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x05;
 2c4:	85 e0       	ldi	r24, 0x05	; 5
 2c6:	85 bd       	out	0x25, r24	; 37

	UCSR0B = 0b10010000;
 2c8:	80 e9       	ldi	r24, 0x90	; 144
 2ca:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UBRR0L = 0x06;
 2ce:	86 e0       	ldi	r24, 0x06	; 6
 2d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	sei();
 2d4:	78 94       	sei

	while (1) {
		if (TCNT0 == 1) {
 2d6:	86 b5       	in	r24, 0x26	; 38
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	e9 f7       	brne	.-6      	; 0x2d6 <main+0x30>
			makeTick();
 2dc:	3d df       	rcall	.-390    	; 0x158 <makeTick>
 2de:	fb cf       	rjmp	.-10     	; 0x2d6 <main+0x30>

000002e0 <__divmodhi4>:
 2e0:	97 fb       	bst	r25, 7
 2e2:	07 2e       	mov	r0, r23
 2e4:	16 f4       	brtc	.+4      	; 0x2ea <__divmodhi4+0xa>
 2e6:	00 94       	com	r0
 2e8:	06 d0       	rcall	.+12     	; 0x2f6 <__divmodhi4_neg1>
 2ea:	77 fd       	sbrc	r23, 7
 2ec:	08 d0       	rcall	.+16     	; 0x2fe <__divmodhi4_neg2>
 2ee:	0b d0       	rcall	.+22     	; 0x306 <__udivmodhi4>
 2f0:	07 fc       	sbrc	r0, 7
 2f2:	05 d0       	rcall	.+10     	; 0x2fe <__divmodhi4_neg2>
 2f4:	3e f4       	brtc	.+14     	; 0x304 <__divmodhi4_exit>

000002f6 <__divmodhi4_neg1>:
 2f6:	90 95       	com	r25
 2f8:	81 95       	neg	r24
 2fa:	9f 4f       	sbci	r25, 0xFF	; 255
 2fc:	08 95       	ret

000002fe <__divmodhi4_neg2>:
 2fe:	70 95       	com	r23
 300:	61 95       	neg	r22
 302:	7f 4f       	sbci	r23, 0xFF	; 255

00000304 <__divmodhi4_exit>:
 304:	08 95       	ret

00000306 <__udivmodhi4>:
 306:	aa 1b       	sub	r26, r26
 308:	bb 1b       	sub	r27, r27
 30a:	51 e1       	ldi	r21, 0x11	; 17
 30c:	07 c0       	rjmp	.+14     	; 0x31c <__udivmodhi4_ep>

0000030e <__udivmodhi4_loop>:
 30e:	aa 1f       	adc	r26, r26
 310:	bb 1f       	adc	r27, r27
 312:	a6 17       	cp	r26, r22
 314:	b7 07       	cpc	r27, r23
 316:	10 f0       	brcs	.+4      	; 0x31c <__udivmodhi4_ep>
 318:	a6 1b       	sub	r26, r22
 31a:	b7 0b       	sbc	r27, r23

0000031c <__udivmodhi4_ep>:
 31c:	88 1f       	adc	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	5a 95       	dec	r21
 322:	a9 f7       	brne	.-22     	; 0x30e <__udivmodhi4_loop>
 324:	80 95       	com	r24
 326:	90 95       	com	r25
 328:	bc 01       	movw	r22, r24
 32a:	cd 01       	movw	r24, r26
 32c:	08 95       	ret

0000032e <_exit>:
 32e:	f8 94       	cli

00000330 <__stop_program>:
 330:	ff cf       	rjmp	.-2      	; 0x330 <__stop_program>
