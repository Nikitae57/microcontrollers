
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  000002ca  0000035e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800202  00800202  00000360  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b67  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a50  00000000  00000000  00000f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003fa  00000000  00000000  000019cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d2  00000000  00000000  00001eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000150  00000000  00000000  0000237e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000024ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__vector_1>
   6:	00 00       	nop
   8:	f7 c0       	rjmp	.+494    	; 0x1f8 <__vector_2>
   a:	00 00       	nop
   c:	93 c0       	rjmp	.+294    	; 0x134 <__vector_3>
   e:	00 00       	nop
  10:	7a c0       	rjmp	.+244    	; 0x106 <__bad_interrupt>
  12:	00 00       	nop
  14:	78 c0       	rjmp	.+240    	; 0x106 <__bad_interrupt>
  16:	00 00       	nop
  18:	76 c0       	rjmp	.+236    	; 0x106 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	74 c0       	rjmp	.+232    	; 0x106 <__bad_interrupt>
  1e:	00 00       	nop
  20:	72 c0       	rjmp	.+228    	; 0x106 <__bad_interrupt>
  22:	00 00       	nop
  24:	70 c0       	rjmp	.+224    	; 0x106 <__bad_interrupt>
  26:	00 00       	nop
  28:	6e c0       	rjmp	.+220    	; 0x106 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6c c0       	rjmp	.+216    	; 0x106 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6a c0       	rjmp	.+212    	; 0x106 <__bad_interrupt>
  32:	00 00       	nop
  34:	68 c0       	rjmp	.+208    	; 0x106 <__bad_interrupt>
  36:	00 00       	nop
  38:	66 c0       	rjmp	.+204    	; 0x106 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	64 c0       	rjmp	.+200    	; 0x106 <__bad_interrupt>
  3e:	00 00       	nop
  40:	62 c0       	rjmp	.+196    	; 0x106 <__bad_interrupt>
  42:	00 00       	nop
  44:	60 c0       	rjmp	.+192    	; 0x106 <__bad_interrupt>
  46:	00 00       	nop
  48:	5e c0       	rjmp	.+188    	; 0x106 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5c c0       	rjmp	.+184    	; 0x106 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5a c0       	rjmp	.+180    	; 0x106 <__bad_interrupt>
  52:	00 00       	nop
  54:	58 c0       	rjmp	.+176    	; 0x106 <__bad_interrupt>
  56:	00 00       	nop
  58:	56 c0       	rjmp	.+172    	; 0x106 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	54 c0       	rjmp	.+168    	; 0x106 <__bad_interrupt>
  5e:	00 00       	nop
  60:	52 c0       	rjmp	.+164    	; 0x106 <__bad_interrupt>
  62:	00 00       	nop
  64:	50 c0       	rjmp	.+160    	; 0x106 <__bad_interrupt>
  66:	00 00       	nop
  68:	4e c0       	rjmp	.+156    	; 0x106 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4c c0       	rjmp	.+152    	; 0x106 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4a c0       	rjmp	.+148    	; 0x106 <__bad_interrupt>
  72:	00 00       	nop
  74:	48 c0       	rjmp	.+144    	; 0x106 <__bad_interrupt>
  76:	00 00       	nop
  78:	46 c0       	rjmp	.+140    	; 0x106 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	44 c0       	rjmp	.+136    	; 0x106 <__bad_interrupt>
  7e:	00 00       	nop
  80:	42 c0       	rjmp	.+132    	; 0x106 <__bad_interrupt>
  82:	00 00       	nop
  84:	40 c0       	rjmp	.+128    	; 0x106 <__bad_interrupt>
  86:	00 00       	nop
  88:	3e c0       	rjmp	.+124    	; 0x106 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3c c0       	rjmp	.+120    	; 0x106 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3a c0       	rjmp	.+116    	; 0x106 <__bad_interrupt>
  92:	00 00       	nop
  94:	38 c0       	rjmp	.+112    	; 0x106 <__bad_interrupt>
  96:	00 00       	nop
  98:	36 c0       	rjmp	.+108    	; 0x106 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	34 c0       	rjmp	.+104    	; 0x106 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	32 c0       	rjmp	.+100    	; 0x106 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	30 c0       	rjmp	.+96     	; 0x106 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2e c0       	rjmp	.+92     	; 0x106 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2c c0       	rjmp	.+88     	; 0x106 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2a c0       	rjmp	.+84     	; 0x106 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	28 c0       	rjmp	.+80     	; 0x106 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	26 c0       	rjmp	.+76     	; 0x106 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	24 c0       	rjmp	.+72     	; 0x106 <__bad_interrupt>
  be:	00 00       	nop
  c0:	22 c0       	rjmp	.+68     	; 0x106 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	20 c0       	rjmp	.+64     	; 0x106 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1e c0       	rjmp	.+60     	; 0x106 <__bad_interrupt>
	...

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	12 e0       	ldi	r17, 0x02	; 2
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b2 e0       	ldi	r27, 0x02	; 2
  de:	ea ec       	ldi	r30, 0xCA	; 202
  e0:	f2 e0       	ldi	r31, 0x02	; 2
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	0b bf       	out	0x3b, r16	; 59
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
  e8:	07 90       	elpm	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	a2 30       	cpi	r26, 0x02	; 2
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>

000000f2 <__do_clear_bss>:
  f2:	22 e0       	ldi	r18, 0x02	; 2
  f4:	a2 e0       	ldi	r26, 0x02	; 2
  f6:	b2 e0       	ldi	r27, 0x02	; 2
  f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
  fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
  fc:	a3 30       	cpi	r26, 0x03	; 3
  fe:	b2 07       	cpc	r27, r18
 100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
 102:	a3 d0       	rcall	.+326    	; 0x24a <main>
 104:	e0 c0       	rjmp	.+448    	; 0x2c6 <_exit>

00000106 <__bad_interrupt>:
 106:	7c cf       	rjmp	.-264    	; 0x0 <__vectors>

00000108 <__vector_1>:

bool shouldRun = true;
uint8_t mode = 0;
uint8_t delay = 50;

ISR(INT0_vect) {
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
	cli();
 116:	f8 94       	cli
	shouldRun = !shouldRun;
 118:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <shouldRun>
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	89 27       	eor	r24, r25
 120:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <shouldRun>
	sei();
 124:	78 94       	sei
}
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <__vector_3>:
	cli();
	changeMode();
	sei();
}

ISR(INT2_vect) {
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	8f 93       	push	r24
	cli();
 140:	f8 94       	cli
	if (delay >= 250) {
 142:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 146:	8a 3f       	cpi	r24, 0xFA	; 250
 148:	10 f0       	brcs	.+4      	; 0x14e <__vector_3+0x1a>
		delay = 0;
 14a:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
	}
	
	delay += 50;
 14e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 152:	8e 5c       	subi	r24, 0xCE	; 206
 154:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
	OCR0A = delay;
 158:	87 bd       	out	0x27, r24	; 39
	sei();
 15a:	78 94       	sei
}
 15c:	8f 91       	pop	r24
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <makeTick>:


void makeTick() {
	if (!shouldRun) {
 168:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <shouldRun>
 16c:	81 11       	cpse	r24, r1
 16e:	02 c0       	rjmp	.+4      	; 0x174 <makeTick+0xc>
		PORTB = 0;
 170:	15 b8       	out	0x05, r1	; 5
		return;
 172:	08 95       	ret
	}
	
	switch(mode) {
 174:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	41 f0       	breq	.+16     	; 0x18c <makeTick+0x24>
 17c:	18 f0       	brcs	.+6      	; 0x184 <makeTick+0x1c>
 17e:	82 30       	cpi	r24, 0x02	; 2
 180:	41 f0       	breq	.+16     	; 0x192 <makeTick+0x2a>
 182:	08 95       	ret
		case 0: {
			PORTB = ~PORTB;
 184:	85 b1       	in	r24, 0x05	; 5
 186:	80 95       	com	r24
 188:	85 b9       	out	0x05, r24	; 5
			break;
 18a:	08 95       	ret
		}
		
		case 1: {
			PORTB = 0xff;
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	85 b9       	out	0x05, r24	; 5
			break;
 190:	08 95       	ret
		}
		
		case 2: {
			PORTB = (PORTB << 1);
 192:	85 b1       	in	r24, 0x05	; 5
 194:	88 0f       	add	r24, r24
 196:	85 b9       	out	0x05, r24	; 5
			if (!(PORTB & (1 << 1))) {
 198:	29 99       	sbic	0x05, 1	; 5
 19a:	03 c0       	rjmp	.+6      	; 0x1a2 <makeTick+0x3a>
				PORTB++; // If penultimate light is off then turn on last light
 19c:	85 b1       	in	r24, 0x05	; 5
 19e:	8f 5f       	subi	r24, 0xFF	; 255
 1a0:	85 b9       	out	0x05, r24	; 5
 1a2:	08 95       	ret

000001a4 <changeMode>:
		}
	}
}

void changeMode() {
	mode = (mode + 1) % 3;
 1a4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	63 e0       	ldi	r22, 0x03	; 3
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	63 d0       	rcall	.+198    	; 0x278 <__divmodhi4>
 1b2:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
	
	switch(mode) {
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	69 f0       	breq	.+26     	; 0x1d4 <changeMode+0x30>
 1ba:	18 f0       	brcs	.+6      	; 0x1c2 <changeMode+0x1e>
 1bc:	82 30       	cpi	r24, 0x02	; 2
 1be:	99 f0       	breq	.+38     	; 0x1e6 <changeMode+0x42>
 1c0:	08 95       	ret
		case 0: {
			TCCR0A = 0x02; // CTC
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	84 bd       	out	0x24, r24	; 36
			TCCR0B = 0x05;
 1c6:	85 e0       	ldi	r24, 0x05	; 5
 1c8:	85 bd       	out	0x25, r24	; 37
			PORTB = 0xff; // Blink
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	85 b9       	out	0x05, r24	; 5
			PORTF = 0b00000001;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	81 bb       	out	0x11, r24	; 17
			break;
 1d2:	08 95       	ret
		}
		
		case 1: {
			TCCR0A = 0x40; // Normal
 1d4:	80 e4       	ldi	r24, 0x40	; 64
 1d6:	84 bd       	out	0x24, r24	; 36
			TCCR0B = 0x05;
 1d8:	85 e0       	ldi	r24, 0x05	; 5
 1da:	85 bd       	out	0x25, r24	; 37
			PORTB = 0xff; // Constant light
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	85 b9       	out	0x05, r24	; 5
			PORTF = 0b00000010;
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	81 bb       	out	0x11, r24	; 17
			break;
 1e4:	08 95       	ret
		}
		
		case 2: { // Moving light
			TCCR0B = (1 << WGM02) | 0x05;
 1e6:	8d e0       	ldi	r24, 0x0D	; 13
 1e8:	85 bd       	out	0x25, r24	; 37
			TCCR0A = (1 << WGM01) | (1 << WGM00) | (1 << COM0A0); // Fast PWM
 1ea:	83 e4       	ldi	r24, 0x43	; 67
 1ec:	84 bd       	out	0x24, r24	; 36
			PORTB = 0b10101010;
 1ee:	8a ea       	ldi	r24, 0xAA	; 170
 1f0:	85 b9       	out	0x05, r24	; 5
			PORTF = 0b00000100;
 1f2:	84 e0       	ldi	r24, 0x04	; 4
 1f4:	81 bb       	out	0x11, r24	; 17
 1f6:	08 95       	ret

000001f8 <__vector_2>:
	cli();
	shouldRun = !shouldRun;
	sei();
}

ISR(INT1_vect) {
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
 202:	0b b6       	in	r0, 0x3b	; 59
 204:	0f 92       	push	r0
 206:	2f 93       	push	r18
 208:	3f 93       	push	r19
 20a:	4f 93       	push	r20
 20c:	5f 93       	push	r21
 20e:	6f 93       	push	r22
 210:	7f 93       	push	r23
 212:	8f 93       	push	r24
 214:	9f 93       	push	r25
 216:	af 93       	push	r26
 218:	bf 93       	push	r27
 21a:	ef 93       	push	r30
 21c:	ff 93       	push	r31
	cli();
 21e:	f8 94       	cli
	changeMode();
 220:	c1 df       	rcall	.-126    	; 0x1a4 <changeMode>
	sei();
 222:	78 94       	sei
}
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	bf 91       	pop	r27
 22a:	af 91       	pop	r26
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	7f 91       	pop	r23
 232:	6f 91       	pop	r22
 234:	5f 91       	pop	r21
 236:	4f 91       	pop	r20
 238:	3f 91       	pop	r19
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0b be       	out	0x3b, r0	; 59
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <main>:
		}
	}
}

int main(void) {
	DDRA = 0;
 24a:	11 b8       	out	0x01, r1	; 1
	DDRB = 0xff;
 24c:	8f ef       	ldi	r24, 0xFF	; 255
 24e:	84 b9       	out	0x04, r24	; 4
	DDRF = 0xff;
 250:	80 bb       	out	0x10, r24	; 16
	EICRA = 0b00111111;
 252:	8f e3       	ldi	r24, 0x3F	; 63
 254:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 0b00000111;
 258:	87 e0       	ldi	r24, 0x07	; 7
 25a:	8d bb       	out	0x1d, r24	; 29
	PORTF = 0b00000001;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	81 bb       	out	0x11, r24	; 17
	sei();
 260:	78 94       	sei

	OCR0A = 50;
 262:	82 e3       	ldi	r24, 0x32	; 50
 264:	87 bd       	out	0x27, r24	; 39
	TCCR0A = 0x02; // CTC
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x05;
 26a:	85 e0       	ldi	r24, 0x05	; 5
 26c:	85 bd       	out	0x25, r24	; 37

	while (1) {
		if (TCNT0 == 0) {
 26e:	86 b5       	in	r24, 0x26	; 38
 270:	81 11       	cpse	r24, r1
 272:	fd cf       	rjmp	.-6      	; 0x26e <main+0x24>
			makeTick();
 274:	79 df       	rcall	.-270    	; 0x168 <makeTick>
 276:	fb cf       	rjmp	.-10     	; 0x26e <main+0x24>

00000278 <__divmodhi4>:
 278:	97 fb       	bst	r25, 7
 27a:	07 2e       	mov	r0, r23
 27c:	16 f4       	brtc	.+4      	; 0x282 <__divmodhi4+0xa>
 27e:	00 94       	com	r0
 280:	06 d0       	rcall	.+12     	; 0x28e <__divmodhi4_neg1>
 282:	77 fd       	sbrc	r23, 7
 284:	08 d0       	rcall	.+16     	; 0x296 <__divmodhi4_neg2>
 286:	0b d0       	rcall	.+22     	; 0x29e <__udivmodhi4>
 288:	07 fc       	sbrc	r0, 7
 28a:	05 d0       	rcall	.+10     	; 0x296 <__divmodhi4_neg2>
 28c:	3e f4       	brtc	.+14     	; 0x29c <__divmodhi4_exit>

0000028e <__divmodhi4_neg1>:
 28e:	90 95       	com	r25
 290:	81 95       	neg	r24
 292:	9f 4f       	sbci	r25, 0xFF	; 255
 294:	08 95       	ret

00000296 <__divmodhi4_neg2>:
 296:	70 95       	com	r23
 298:	61 95       	neg	r22
 29a:	7f 4f       	sbci	r23, 0xFF	; 255

0000029c <__divmodhi4_exit>:
 29c:	08 95       	ret

0000029e <__udivmodhi4>:
 29e:	aa 1b       	sub	r26, r26
 2a0:	bb 1b       	sub	r27, r27
 2a2:	51 e1       	ldi	r21, 0x11	; 17
 2a4:	07 c0       	rjmp	.+14     	; 0x2b4 <__udivmodhi4_ep>

000002a6 <__udivmodhi4_loop>:
 2a6:	aa 1f       	adc	r26, r26
 2a8:	bb 1f       	adc	r27, r27
 2aa:	a6 17       	cp	r26, r22
 2ac:	b7 07       	cpc	r27, r23
 2ae:	10 f0       	brcs	.+4      	; 0x2b4 <__udivmodhi4_ep>
 2b0:	a6 1b       	sub	r26, r22
 2b2:	b7 0b       	sbc	r27, r23

000002b4 <__udivmodhi4_ep>:
 2b4:	88 1f       	adc	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	5a 95       	dec	r21
 2ba:	a9 f7       	brne	.-22     	; 0x2a6 <__udivmodhi4_loop>
 2bc:	80 95       	com	r24
 2be:	90 95       	com	r25
 2c0:	bc 01       	movw	r22, r24
 2c2:	cd 01       	movw	r24, r26
 2c4:	08 95       	ret

000002c6 <_exit>:
 2c6:	f8 94       	cli

000002c8 <__stop_program>:
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <__stop_program>
